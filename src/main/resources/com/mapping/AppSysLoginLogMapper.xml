<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dao.AppSysLoginLogMapper" >
  <resultMap id="BaseResultMap" type="com.model.AppSysLoginLog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="USER_CODE" property="userCode" jdbcType="VARCHAR" />
    <result column="loginDate" property="logindate" jdbcType="TIMESTAMP" />
    <result column="loginPlace" property="loginplace" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, USER_CODE, loginDate, loginPlace, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from APP_SYS_LOGIN_LOG
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from APP_SYS_LOGIN_LOG
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.model.AppSysLoginLog" >
    insert into APP_SYS_LOGIN_LOG (id, USER_CODE, loginDate, 
      loginPlace, status)
    values (#{id,jdbcType=INTEGER}, #{userCode,jdbcType=VARCHAR}, #{logindate,jdbcType=TIMESTAMP}, 
      #{loginplace,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.model.AppSysLoginLog" >
    insert into APP_SYS_LOGIN_LOG
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userCode != null" >
        USER_CODE,
      </if>
      <if test="logindate == null" >
        loginDate,
      </if>
      <if test="loginplace != null" >
        loginPlace,
      </if>
      <if test="status != null" >
        status,
      </if>
      
      
      <if test="address != null" >
        address,
      </if>
        <if test="deviceType != null" >
        device_type,
      </if>
      
        <if test="deviceId != null" >
        device_id,
      </if>
      
      
      
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userCode != null" >
        #{userCode,jdbcType=VARCHAR},
      </if>
      <if test="logindate == null" >
       now(),
      </if>
      <if test="loginplace != null" >
        #{loginplace,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      
      <if test="address != null" >
         #{address,jdbcType=VARCHAR},
      </if>
        <if test="deviceType != null" >
         #{deviceType,jdbcType=VARCHAR},
      </if>
      
        <if test="deviceId != null" >
        #{ deviceId,jdbcType=VARCHAR},
      </if>
      
      
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.AppSysLoginLog" >
    update APP_SYS_LOGIN_LOG
    <set >
      <if test="userCode != null" >
        USER_CODE = #{userCode,jdbcType=VARCHAR},
      </if>
      <if test="logindate != null" >
        loginDate = #{logindate,jdbcType=TIMESTAMP},
      </if>
      <if test="loginplace != null" >
        loginPlace = #{loginplace,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.model.AppSysLoginLog" >
    update APP_SYS_LOGIN_LOG
    set USER_CODE = #{userCode,jdbcType=VARCHAR},
      loginDate = #{logindate,jdbcType=TIMESTAMP},
      loginPlace = #{loginplace,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getLastMonthRRHLogninData"  resultType="com.model.AppSysLoginLog">
      SELECT
  t2.id as  id,
  t2.user_code as    userCode,
  t2.logindate as    logindate,
  t2.loginplace   as loginplace ,
  t2.status AS  status,
  t2.address as  address,
  t2.device_type as   deviceType,
  t2.device_id as  deviceId
from
    (
      SELECT min(loginDate) loginDate , device_id from app_sys_login_log where  `status`=0 and  device_type=1
	      and loginDate  BETWEEN  DATE_SUB( NOW(), interval 100 day )  and   NOW()    GROUP BY device_id
    ) t1  , app_sys_login_log t2  where t1.device_id=t2.device_id and  t1.loginDate =t2.loginDate;
  </select>

</mapper>