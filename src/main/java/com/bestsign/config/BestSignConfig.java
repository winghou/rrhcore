package com.bestsign.config;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bestsign.model.ContractData;
import com.bestsign.model.PdfData;
import com.bestsign.model.YueCaiContract;
import com.bestsign.utils.EncodeUtils;
import com.bestsign.utils.HttpClientSender;
import com.bestsign.utils.RSAUtils;
import com.bestsign.utils.Utils;
import com.util.DateUtil;
import com.util.HttpClientUtil;
import com.util.StringUtil;

public class BestSignConfig {

	/**
	 * 上上签请求URL
	 */
	public static final String bestSignHostUrl="https://openapi.bestsign.info/openapi/v2"; //测试URL
//	public static final String bestSignHostUrl="https://openapi.bestsign.cn/openapi/v2"; //正式URL
	
	/**
	 * 上上签用户账户
	 */
	public static String ACCOUNT="ssqsandbox_jiajia_ge@yuecaijf.cn"; //测试
//	public static String ACCOUNT="jiajia_ge@yuecaijf.cn"; //正式
	
	/**
	 * 开发者ID
	 */
	public static String developerid="1891090092403982951"; //测试
//	public static String developerid="1891083000876106343"; //正式
	
	/**
	 * 上上签私钥
	 */
	public static final String private_key="MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCHxfZMfM6vs7u3G8KfZN2NLeD5xQ5IDOSnOTUP+OVBQWcIU+xrUNbOm+zXCrS5ClfadlA8ze23/BQ7RqTwoXFOcH26vrI8yOSmwtZ+MHMpvJOIQHwx6lL4hjUvVU8agQ/YbQ/XSN1u50RBParmkQdDrebjt/l6u2RToDuM+Vkgds7lj5UCBZA2JAMa+oFqfy+Qm5F9vnJAkqIHdomu5RXdxB/DfLyE6HGmKVgEo8ZG6R2cndFVPGv+cCMApNgfgPFPX+Lv8wVWsO1Ob4wx19R/clYsvAGsTTmuDe4ipj72QuKS1+Vzdi77nDFiYpJV84G5lTlCQ50huJoQD+3prMhhAgMBAAECggEAOdLGdYbF47BxJqes+INVk9XRNa6FyYusKcfEYHwI7wSyo6pSStYP1cg0UtUdaJ0OE11GCM9PCYdS+ne4sT6gad6gvVKPyDFqp9bc0LtDoKfOUT3dZsi781n89p6nZMtIe0zfbTl8DMpzmDFyQmXLqTg72Am3N1ztemwIUJ61JYy0s7nk7q3ZTQi44kSi4qXb+m4YPA919/1y1rYW2DgaV5pKOX9JVFoxCkGUBU7cvkTSc0GafckAIpbFrABUPTUh1WLIT/bKmyIp5o9hKWPsj7CfYE4dNeF11pkOfOF9R07RwBuNdWXm7qA1L1C+X16hOIiEYHq4bR/wHrS7Hsc3UQKBgQDGBp+EBg17f1Bc2rS8fR6Aeps3vpGnonZJ7gljEQTSiD7eKZwpuwQOvRXG2/mimEwMS96nl9nCPYezgM7RmnULvlNQTdVyYlk2qbeZxbsjcdXZPGwBV+/SLGNsxyXMM3NenCFiIw0joIbOnYnGUrPlJ8bxw+/uZrcd//MfxPK2FQKBgQCvhbdU17uCVtBd2OiLJBdPr2lo7M762V4Ebkb9fJBS5HqXPfppnBBhgx+1TolzKmAfSJ6tl9JOOHv7uR/ZSaB0lxZ7OC2HMlafJbOz7329uSdaB9yafiV52ZlcrduBrTD3smNKQ7/o0X4v3AZy6iwUN4mJLvXopNx5Kvgzi2eIHQKBgQCtlASjD0MmK3Tfz315cxsXd2EzPcIi9M9HAnYL9lEJ0g95YXPXSGzIFopOI2fwVBrk9GQY94wTLSgT+iZPqFpMjuosi+07NGYK+j1Ldv0Qlqnin4n0q4Y17l7AbNf+5GKOXcENargLsJw54/Fue/PgPDuwlBVuHW8Jxt7vzA0L+QKBgFchZMm8MfvYxqTfqUhxCRVoeUY5z+Gch9xhNeJdtHNBsk1j2ewVKdiOM+5X50mBLqg473QzGpXz2jAyTMobj4hw/Br83zTu2yszlwpqh5vnzs4VewBCQK5FQ6lLMN0lsVo0dq+GBD05yY9OhPEEqA79JswvwKjVNhD8MKu9tw5NAoGBAKyu+ija9poy2v+4WeXp/mPrmZB9HquqM5ElIQeYBa/ffd3I0BneFl5jrEJKrPQDu0eaXjVy5V6OtRLYXHyadDC63d7uz9ruQbpNp2RzsX7kXg7yyZQz2hHWnnuh33cAMO/i+s5JoZzbE4aPRZeGhg0lls1dLs7XnPcggDb3aE6A";

	/**
	 * 上上签悦才印章
	 */
	public static String imageDataSign="";
	
	/**
	 * 印章名称
	 */
	public static final String signName="随心花金融科技";
	
	/**
	 * 上传并创建合同
	 */
	public static final String uploadAndCreateContractUrl="/storage/contract/upload/";
	
	/**
	 * 生成用户签名/印章图片
	 */
	public static final String createSignUrl="/storage/signatureImage/user/create/";
	
	/**
	 * 上传用户签名/印章图片 这个是盖章
	 */
	public static final String uploadSign="/storage/signatureImage/user/upload/";
	
	/**
	 * 下载用户签名/印章图片
	 */
	public static final String downLoadSign="/storage/signatureImage/user/download/";
	
	/**
	 * 上传合同文件
	 */
	public static final String uploadContract="/storage/upload/";
	
	/**
	 * 为PDF文件添加元素
	 */
	public static final String addDataToPdf="/storage/addPDFElements/";
	
	/**
	 * 创建合同
	 */
	public static final String createContract="/contract/create/";
	
	/**
	 * 签署合同
	 */
	public static final String signContract="/storage/contract/sign/cert/";
	
	/**
	 * 锁定并结束合同
	 */
	public static final String lockEndContract="/storage/contract/lock/";
	
	/**
	 * 撤销合同
	 */
	public static final String cancelContract = "/contract/cancel/";
	
	/**
	 * 获取预览页URL
	 */
	public static final String getContractUrl="/contract/getPreviewURL/";

	/**
	 * 签名类别
	 */
	public static final String rsa = "rsa";
	
	/**
	 * 注册个人用户并申请证书
	 */
	public static final String registerUser = "/user/reg/";
	
	/**
	 * 查询用户证书编号
	 */
	public static final String getUserCertNo = "/user/getCert/";
	
	/**
	 * 查询异步申请状态
	 */
	public static final String getAsyncStatus = "/user/async/applyCert/status/";
	
	/**
	 * 下载合同文件
	 */
	public static final String downloadContract = "/storage/contract/download/";
	
	/**
	 * 查看合同签署状态
	 */
	public static final String signContractStatus = "/contract/getSignerStatus/";
	
	
	/**
	 * 注册个人用户并申请证书
	 * @param ycc
	 * @throws Exception 
	 */
	public static String registerUser(JSONObject object) throws Exception{
		String taskId = null;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("account", StringUtil.nvl(object.get("account")));
		data.put("name", StringUtil.nvl(object.get("name")));
		data.put("userType", "1");
		data.put("mail", "");
		data.put("mobile", "");
		Map<String, Object> credential = new HashMap<String, Object>();
		credential.put("identity", StringUtil.nvl(object.get("identity")));
		credential.put("identityType", "");
		credential.put("contactMobile", "");
		credential.put("contactMail", "");
		credential.put("province", "");
		credential.put("city", "");
		credential.put("address", "");
		data.put("credential", credential);
		data.put("applyCert", "1");
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.registerUser);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			taskId = parseObject.getJSONObject("data").get("taskId").toString();
		}else{
			throw new Exception("上传并创建合同错误信息：" + parseObject.get("data"));
		}
		return taskId;
	}
	
	/**
	 * 异步申请状态查询
	 * @param object
	 * @return
	 * @throws Exception
	 */
	public static String getAsyncStatus(JSONObject object) throws Exception{
		String asyncStatus = null;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("account", StringUtil.nvl(object.get("account")));
		data.put("taskId", StringUtil.nvl(object.get("taskId")));
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.getAsyncStatus);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			asyncStatus = parseObject.getJSONObject("data").get("status").toString();
		}else{
			throw new Exception("查询证书编号错误信息：" + parseObject.get("data"));
		}
		return asyncStatus;
	}
	
	/**
	 * 查询证书编号
	 * @param object
	 * @return
	 * @throws Exception
	 */
	public static String getUserCertNo(JSONObject object) throws Exception{
		String certId = null;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("account", StringUtil.nvl(object.get("account")));
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.getUserCertNo);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			certId = parseObject.getJSONObject("data").get("certId").toString();
		}
		return certId;
	}
	
	/**
	 * 生成用户签章
	 * @param object
	 * @return
	 * @throws Exception
	 */
	public static boolean createSignature(JSONObject object) throws Exception{
		boolean result = false;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("account", StringUtil.nvl(object.get("account")));
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.createSignUrl);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			result = true;
		}
		return result;
	}
	
	/**
	 * 上传用户签章
	 * @param object
	 * @return
	 * @throws Exception
	 */
	public static boolean uploadSignature(JSONObject object) throws Exception{
		boolean result = false;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("account", StringUtil.nvl(object.get("account")));
		data.put("imageData", StringUtil.nvl(object.get("imageData")));
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.uploadSign);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			result = true;
		}
		return result;
	}
	
	/**
	 * 签署合同
	 * @param object
	 * @return
	 * @throws Exception
	 */
	public static boolean signSSQContract(JSONObject object) throws Exception{
		boolean result = false;
		Map<String, Object> data = new HashMap<String, Object>();
		
		String signaturePositions = StringUtil.nvl(object.get("signaturePositions"));
		String signatureImageData = StringUtil.nvl(object.get("signatureImageData"));
		JSONArray positionsArray = new JSONArray();
		if(!"".equals(signaturePositions)){
			positionsArray = object.getJSONArray("signaturePositions");
			data.put("signaturePositions", positionsArray);
		}
		if(!"".equals(signatureImageData)){
			data.put("signatureImageData", signatureImageData);
		}
		data.put("contractId", StringUtil.nvl(object.get("contractId")));
		data.put("signer", StringUtil.nvl(object.get("signer")));
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.signContract);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			result = true;
		}
		return result;
	}
	
	/**
	 * 用户签章及企业签章
	 * @param contractId 上上签合同号
	 * @param signer 账户
	 * @param signType 0：借款合同（个人），1：借款合同（企业），2：代扣协议（个人），3：代扣协议（企业）
	 * @param projectUrl 项目路径
	 * @return
	 * @throws Exception
	 */
	public static boolean personAndCompanySign(String contractId, String signer, int signType, String projectUrl) throws Exception{
		JSONObject data = new JSONObject();
		JSONArray positionArray = new JSONArray();
		JSONObject positionJson = new JSONObject();
		switch (signType) {
		case 0: //借款合同（个人）
			positionJson.put("x", "0.3");
			positionJson.put("y", "0.14");
			positionJson.put("pageNum", "1");
			positionArray.add(positionJson);
			break;
		case 1: //借款合同（企业）
			positionJson.put("x", "0.33");
			positionJson.put("y", "0.168");
			positionJson.put("pageNum", "1");
			positionArray.add(positionJson);
			data.put("signatureImageData", getSealsBase(projectUrl));
			break;
		case 2: //代扣协议（个人）
			positionJson.put("x", "0.28");
			positionJson.put("y", "0.64");
			positionJson.put("pageNum", "2");
			positionArray.add(positionJson);
			break;
		case 3: //代扣协议（企业）
			positionJson.put("x", "0.62");
			positionJson.put("y", "0.589");
			positionJson.put("pageNum", "2");
			positionArray.add(positionJson);
			data.put("signatureImageData", getSealsBase(projectUrl));
			break;
		}
		data.put("contractId", contractId);
		data.put("signer", signer);
		data.put("signaturePositions", positionArray);
		boolean result = signSSQContract(data);
		return result;
	}
	
	/**
	 * 锁定并结束合同
	 * @param contractId 合同号
	 * @return
	 * @throws Exception
	 */
	public static boolean lockContract(String contractId) throws Exception{
		boolean result = false;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("contractId", contractId);
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.lockEndContract);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			result = true;
		}
		return result;
	}
	
	/**
	 * 下载合同文件（GET请求）
	 * @param object
	 * @return
	 * @throws Exception
	 */
	public static String contractDownload(String contractId) throws Exception {
		// 组装url参数
		String urlParams = "contractId=" + contractId;
		// 生成一个时间戳参数
		String rtick = getRtick();;
		// 计算参数签名
		String paramsSign = RSAUtils.calcRsaSign(developerid, private_key, bestSignHostUrl, downloadContract, rtick, urlParams, null);
		// 签名参数追加为url参数
		urlParams = String.format("?developerId=%s&rtick=%s&signType=rsa&sign=%s", developerid, rtick, paramsSign) + "&" + urlParams;
		// 发送请求
		byte[] responseBody = HttpClientSender.sendHttpGet(bestSignHostUrl, downloadContract,urlParams);
		
		String pdfFilePreUrl = "D:\\ssqPdfTest"; //win环境
//		String pdfFilePreUrl = "/mnt/fileUpload/webapps"; //Linux环境
		String zjuri = pdfFilePreUrl + "/fileUpload/ssqPdfFile/" +  new SimpleDateFormat("yyyyMMdd").format(new Date()) + "/";
		byte2File(responseBody, zjuri, contractId + ".pdf"); // 文件下载到本地目录
		// 返回结果解析
		return zjuri + contractId + ".pdf";
	} 
	
	/**
	 * 撤销合同
	 * @param object
	 * @return
	 * @throws Exception
	 */
	public static boolean cancelContract(JSONObject object) throws Exception{
		boolean result = false;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("account", StringUtil.nvl(object.get("account")));
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.cancelContract);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			result = true;
		}
		return result;
	}
	
	/**
	 * 查询合同签署者状态
	 * @param contractId 合同号
	 * @return
	 * @throws Exception
	 */
	public static String getSignContractStatus(JSONObject jsonObject) throws Exception{
		String result = "";
		Map<String, Object> data = new HashMap<String, Object>();
		
		String contractId = StringUtil.nvl(jsonObject.get("contractId"));
		String userAccount = StringUtil.nvl(jsonObject.get("userAccount"));
		data.put("contractId", contractId);
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.signContractStatus);
		
		String dataString = JSONObject.toJSONString(data);
		
		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null && "0".equals(StringUtil.nvl(parseObject.get("errno")))) {
			JSONObject jsonData = (JSONObject) parseObject.get("data");
			if(null != jsonData){
				if(!jsonData.isEmpty()){
					String userSignStatus = StringUtil.nvl(jsonData.get(userAccount));
					String compSignStatus = StringUtil.nvl(jsonData.get(ACCOUNT));
					if("1".equals(userSignStatus) && "1".equals(compSignStatus)){		//个人、悦才均未签署
						result = "0";
					}else if("1".equals(userSignStatus) && "2".equals(compSignStatus)){ //个人未签署，悦才已签署
						result = "1";
					}else if("2".equals(userSignStatus) && "1".equals(compSignStatus)){ //个人已签署，悦才未签署
						result = "2";
					}else if("2".equals(userSignStatus) && "2".equals(compSignStatus)){ //个人、悦才均已签署
						result = "3";
					}
				}else{
					result = "0"; //个人、悦才均未签署
				}
			}
		}
		return result;
	}
	
	public static void main(String[] args) throws Exception {
		JSONObject object = new JSONObject();
		object.put("contractId", "151617968301000001");
		object.put("userAccount", "18761641138");
		getSignContractStatus(object);
	}
	
	/**
	 * 获取公章base64串
	 * @param projectUrl 项目路径
	 * @return
	 */
	public static String getSealsBase(String projectUrl){
		String sealsBase = null;
		try {
			String path = projectUrl + "/contract/sign.png";
			sealsBase = getImageDataSign(path);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return sealsBase;
	}
	
	/**  
	*   
	* 描述：  得到上传的合同编号
	* 创建人：zhaheng  
	* 创建时间：2017年12月27日 下午12:03:47  
	* @version       
	 * @throws Exception 
	*/ 
	public static String getContractId(YueCaiContract ycc) throws Exception {
		String contractId = null;
		Map<String, Object> data = new HashMap<String, Object>();

		data.put("account", BestSignConfig.ACCOUNT);
		data.put("fmd5", ycc.getFmd5());
		data.put("ftype", ycc.getFtype());
		data.put("fname", ycc.getFname());
		data.put("fpages", ycc.getFpages());
		data.put("fdata", ycc.getFdata());
		data.put("title", ycc.getTitle());
		data.put("expireTime", ycc.getExpireTime());
		data.put("description", ycc.getDescription());
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.uploadAndCreateContractUrl);

		String dataString = JSONObject.toJSONString(data);

		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null) {
			if (parseObject.get("errno") != null && "0".equals(parseObject.get("errno").toString())) {
				contractId = parseObject.getJSONObject("data").get("contractId").toString();
			} else {
				throw new Exception("上传并创建合同错误信息：" + parseObject.get("data"));
			}
		}
		if (StringUtils.isBlank(contractId)) {
			throw new Exception("未获取合同编号错误");
		}
		return contractId;
	}
	
	/**  
	*   
	* 描述：  得到文件编号
	* 创建人：zhaheng  
	* 创建时间：2017年12月27日 下午4:08:47  
	* @version       
	 * @throws Exception 
	*/ 
	public static String getFid(YueCaiContract ycc) throws Exception {
		String fid = null;
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("account", BestSignConfig.ACCOUNT);
		data.put("fmd5", ycc.getFmd5());
		data.put("ftype", ycc.getFtype());
		data.put("fname", ycc.getFname());
		data.put("fpages", ycc.getFpages());
		data.put("fdata", ycc.getFdata());
		String postUrlByRsa = getPostUrlByRsa(data, BestSignConfig.uploadContract);

		String dataString = JSONObject.toJSONString(data);
		String doPostJson = HttpClientUtil.doPostJson(postUrlByRsa, dataString);
		JSONObject parseObject = JSON.parseObject(doPostJson);
		if (parseObject != null) {
			if (parseObject.get("errno") != null && "0".equals(parseObject.get("errno").toString())) {
				fid = parseObject.getJSONObject("data").get("fid").toString();
			} else {
				throw new Exception("得到文件编号错误信息：" + parseObject.get("data"));
			}
		}
		if (StringUtils.isBlank(fid)) {
			throw new Exception("未获取文件编号错误");
		}
		return fid;
	}
	
	/**  
	*   
	* 描述：  获取rtick
	* 创建人：zhaheng  
	* 创建时间：2017年12月27日 下午2:59:16  
	* @version       
	*/ 
	public static String getRtick() {
		String randomStr = Utils.rand(1000, 9999) + "";
		String unix = Long.toString(System.currentTimeMillis());
		String rtick = unix + randomStr;
		return rtick;
	}
	
	/**  
	*   
	* 描述： 获取图片base64签名 
	* 创建人：zhaheng  
	* 创建时间：2017年12月28日 下午4:22:06  
	* @version       
	*/ 
	public static String getImageDataSign(String picPath) {
		byte[] img = null;
		try {
			img = FileUtils.readFileToByteArray(new File(picPath));
		} catch (IOException e) {
			e.printStackTrace();
		}
		String imgBase64Data = Base64.encodeBase64String(img);
		System.out.println(imgBase64Data);
		return imgBase64Data;
	}
	
	/**  
	*   
	* 描述： 获得有效期时间 精确到秒级的时间戳
	* 创建人：zhaheng  
	* 创建时间：2017年12月28日 上午9:26:41  
	* @version       
	*/ 
	public static String getExpireTime(int days) {
		Date now = new Date();
		Date fexpireTime = DateUtil.addDays(now, days);// 6天后过期
		long expireTime = fexpireTime.getTime();// 合同签署的到期时间
		String timestamp = String.valueOf(expireTime / 1000);// 去掉后三位
		return String.valueOf(timestamp);
	}
	
    /**  
    *   
    * 描述：  get请求路径
    * 创建人：zhaheng  
    * 创建时间：2017年12月28日 上午9:26:56  
    * @version       
    */ 
	public static String getUrlByRsa(String account, String imageName, Map<String, Object> data, String path) throws Exception {

        String rtick = getRtick();

        String sign = String.format("account=%sdeveloperId=%simageName=%srtick=%ssignType=rsa/openapi/v2%s", account,developerid, imageName,rtick, path); // 生成签名字符串

        String signDataString = getSignData(sign);
        String signData = Base64.encodeBase64String(EncodeUtils.rsaSign(signDataString.getBytes("UTF-8"), private_key));

        signData = URLEncoder.encode(signData, "UTF-8");
        path = path + "/?developerId=" + developerid + "&rtick=" + rtick + "&sign=" + signData + "&signType=rsa";
        return bestSignHostUrl+path;
    }

    /**  
    *   
    * 描述：  Post请求路径
    * 创建人：zhaheng  
    * 创建时间：2017年12月28日 上午9:27:14  
    * @version       
    */ 
	public static String getPostUrlByRsa(Map<String, Object> data, String path) throws Exception {

		String rtick = getRtick();

        String jsonData = JSON.toJSONString(data);
        String dataMd5 = EncodeUtils.md5(jsonData.getBytes("UTF-8"));
        String sign = String.format("developerId=%srtick=%ssignType=rsa/openapi/v2%s/%s", developerid, rtick, path, dataMd5); // 生成签名字符串

        String signDataString = getSignData(sign);
        String signData = Base64.encodeBase64String(EncodeUtils.rsaSign(signDataString.getBytes("UTF-8"), private_key));

        signData = URLEncoder.encode(signData, "UTF-8");
        path = path + "/?developerId=" + developerid + "&rtick=" + rtick + "&sign=" + signData + "&signType=rsa";
        return bestSignHostUrl+path;
    }

    /**  
    *   
    * 描述：  获取Sign签名
    * 创建人：zhaheng  
    * 创建时间：2017年12月28日 上午9:29:43  
    * @version       
    */ 
	public static String getSignData(final String... args) {
		StringBuilder builder = new StringBuilder();
		int len = args.length;
		for (int i = 0; i < args.length; i++) {
			builder.append(Utils.convertToUtf8(args[i]));
			if (i < len - 1) {
				builder.append("\n");
			}
		}
		return builder.toString();
	}
	
	/**  
	*   
	* 描述：  添加随心花分期服务协议合同的元素，坐标已调好
	* 创建人：zhaheng  
	* 创建时间：2017年12月29日 下午1:00:55  
	* @version       
	*/ 
	public static String getBorrowPdfElements(ContractData ctd) {
		List<PdfData> list = new ArrayList<PdfData>();
		if(null != ctd){
			// 用户名
			if(!"".equals(StringUtil.nvl(ctd.getCustomName()))){
				list.add(new PdfData("1", "6.4", "4.75", "text", ctd.getCustomName(), "11"));
			}
			// 身份证号
			if(!"".equals(StringUtil.nvl(ctd.getIdetityCard()))){
				list.add(new PdfData("1", "5.3", "5.35", "text", ctd.getIdetityCard(), "11"));
			}
			// 手机号
			if(!"".equals(StringUtil.nvl(ctd.getPhone()))){
				list.add(new PdfData("1", "4.5", "5.9", "text", ctd.getPhone(), "11"));
			}
			// 银行卡号
			if(!"".equals(StringUtil.nvl(ctd.getBankCardNo()))){
				list.add(new PdfData("1", "10", "11.5", "text", ctd.getBankCardNo(), "11"));
			}
			// 借款金额
			if(!"".equals(StringUtil.nvl(ctd.getBorrowAmt()))){
				list.add(new PdfData("1", "10", "9.2", "text", ctd.getBorrowAmt(), "11"));
			}
			// 借款天数
			if(!"".equals(StringUtil.nvl(ctd.getBorrowPerion()))){
				list.add(new PdfData("1", "10", "9.8", "text", ctd.getBorrowPerion(), "11"));
			}
			// 利率
			if(!"".equals(StringUtil.nvl(ctd.getMchRate()))){
				list.add(new PdfData("2", "12.6", "2.55", "text", ctd.getMchRate(), "11"));
			}
			// 服务费率
			if(!"".equals(StringUtil.nvl(ctd.getServeRate()))){
				list.add(new PdfData("2", "6.5", "4.2", "text", ctd.getServeRate(), "11"));
			}
			// 逾期3天内利率
			if(!"".equals(StringUtil.nvl(ctd.getOverdule3DayRate()))){
				list.add(new PdfData("2", "10.3", "15.9", "text", ctd.getOverdule3DayRate(), "11"));
			}
			// 逾期3天后利率
			if(!"".equals(StringUtil.nvl(ctd.getOverduleOver3DayRate()))){
				list.add(new PdfData("2", "10", "16.7", "text", ctd.getOverduleOver3DayRate(), "11"));
			}
			// 合同号
			if(!"".equals(StringUtil.nvl(ctd.getContractNo()))){
				list.add(new PdfData("1", "14", "3.65", "text", ctd.getContractNo(), "11"));
			}
			// 放款时间
			if(!"".equals(StringUtil.nvl(ctd.getLoanDate()))){
				list.add(new PdfData("1", "7", "10.4", "text", ctd.getLoanDate(), "11"));
			}
			// 应还款时间
			if(!"".equals(StringUtil.nvl(ctd.getRepayDate()))){
				list.add(new PdfData("1", "13", "10.4", "text", ctd.getRepayDate(), "11"));
			}
			// 应还款金额
			if(!"".equals(StringUtil.nvl(ctd.getShouldPayAmt()))){
				list.add(new PdfData("1", "10", "11", "text", ctd.getShouldPayAmt(), "11"));
			}
			// 借款用途
			if(!"".equals(StringUtil.nvl(ctd.getPurposeName()))){
				list.add(new PdfData("1", "10", "12.1", "text", ctd.getPurposeName(), "11"));
			}
			// 借款合同公章位置
			if(!"".equals(StringUtil.nvl(ctd.getBorrowOfficialSealsText()))){
				list.add(new PdfData("1", "7", "5", "image", ctd.getBorrowOfficialSealsText(), "1"));
			}
		}
		String jsonString = JSON.toJSONString(list);
		return jsonString;
	}
	
	/**  
	*   
	* 描述：  添加随心花分期服务协议合同的元素，坐标已调好
	* 创建人：zhaheng  
	* 创建时间：2017年12月29日 下午1:00:55  
	* @version       
	*/ 
	public static String getWithholdPdfElements(ContractData ctd) {
		List<PdfData> list = new ArrayList<PdfData>();
		if(null != ctd){
			// 用户名
			if(!"".equals(StringUtil.nvl(ctd.getCustomName()))){
				list.add(new PdfData("2", "6", "19.5", "text", ctd.getCustomName(), "11"));
			}
			// 身份证号
			if(!"".equals(StringUtil.nvl(ctd.getIdetityCard()))){
				list.add(new PdfData("2", "6", "20.5", "text", ctd.getIdetityCard(), "11"));
			}
			// 手机号
			if(!"".equals(StringUtil.nvl(ctd.getPhone()))){
				list.add(new PdfData("2", "6", "21.5", "text", ctd.getPhone(), "11"));
			}
			// 代扣协议公章位置
			if(!"".equals(StringUtil.nvl(ctd.getWithholdOfficialSealsText()))){
				list.add(new PdfData("2", "13", "17.5", "image", ctd.getWithholdOfficialSealsText(), "1"));
			}
		}
		String jsonString = JSON.toJSONString(list);
		return jsonString;
	}
	
	/**
	 * 获取服务器端的webapps路径
	 * 
	 * @return
	 */
	public String findServerPath() {
		String classPath = this.getClass().getClassLoader().getResource("/").getPath();
		try {
			classPath = URLDecoder.decode(classPath, "gb2312");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		String[] strPath = classPath.split("/");
		String path = "";
		for (int i = 0; i < strPath.length; i++) {
			if (i > 0 && i <= 3) {
				path = path + strPath[i] + "/";
			}
		}
		return path;
	}
	
	/**
     * 辅助方法，byte数组保存为本地文件
     * @param buf
     * @param filePath
     * @param fileName
     */
	private static void byte2File(byte[] buf, String filePath, String fileName) {
		BufferedOutputStream bos = null;
		FileOutputStream fos = null;
		File file = null;
		try {
			File dir = new File(filePath);
			if (!dir.exists()) {
				dir.mkdirs();
			}
			file = new File(filePath + File.separator + fileName);
			fos = new FileOutputStream(file);
			bos = new BufferedOutputStream(fos);
			bos.write(buf);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bos != null) {
				try {
					bos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
